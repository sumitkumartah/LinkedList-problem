141. Linked List Cycle


BRUTE FORCE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  BY USING HASHING 


public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null)
            return false;

        Map<ListNode, Integer> mpp = new HashMap<>();
        ListNode temp = head;
        while (temp != null) {
            if (mpp.containsKey(temp)) {
                // Found a cycle
                return true;
            }
            mpp.put(temp, mpp.getOrDefault(temp, 0) + 1);
            temp = temp.next; // Move temp to the next node
        }
        return false;
    }
}


TC= O( N  * 2)
SC=O(1)



optimal>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>BY USING TORTOISE AND HARE METHOD


public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null)
            return false;

        ListNode slow=head;
        ListNode fast=head;

        while(fast!=null  && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;

            if(slow==fast) return true;
        }
        return false;
    }
}


TC= O(N)   SC=O(1)
