Add 1 to a number represented as linked list

Link-   https://www.geeksforgeeks.org/problems/add-1-to-a-number-represented-as-linked-list/1


BRUTE FORCE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MY CODE



class Solution {
    public static Node addOne(Node head) { 
        Node dummynode = new Node(-1);
        Node cur = dummynode;
        Node newhead = reverse(head);
        Node temp=newhead;
        int carry = 1; // Since we are adding 1
        while (temp!= null) {
            int sum = carry + temp.data;
            carry = sum / 10;
            Node newnode=new Node(sum%10);

            cur.next = newnode;
            cur = cur.next;
            
            temp = temp.next;
        }
        if (carry > 0) {
            Node newnode = new Node(carry);
            cur.next = newnode;
        }
        Node neww = reverse(dummynode.next); // Passing the actual head node
        return neww;
    }

    public static Node reverse(Node node) {
        if (node == null || node.next == null) return node;
        Node newhead = reverse(node.next);
        Node front = node.next;
        front.next = node;
        node.next = null;

        return newhead;
    }
}

BRUTE FORCE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>STRIVER'S APPROACH


class Solution {
    public static Node addOne(Node head) { 
        head=reverse(head);
        Node temp=head;
        
        int carry=1;
        
        while(temp!=null){
            temp.data=temp.data+carry;
            
            if(temp.data<10){
                carry=0;
                break;
            }
            else{
                temp.data=0;
                carry=1;
            }
        }
        
        if( carry==1)//at the end if there is carry
        {
            Node newnode=new Node (carry);
            head=reverse(head);
            newnode.next=head;
            return newnode;
        }
        head=reverse(head);
        return head;
    }

    public static Node reverse(Node node) {
        if (node == null || node.next == null) return node;
        Node newhead = reverse(node.next);
        Node front = node.next;
        front.next = node;
        node.next = null;

        return newhead;
    }
}



TC=O(3N)     SC=O(1)





OPTIMAL SOILUTION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>BY RECURTION


class Solution
{
    public static Node addOne(Node head) 
    { 
       int carry=helper(head);
       if(carry==1){
           Node newnode=new Node (carry);
           newnode.next=head;
           return newnode;
           
       }
       return head;
    }
    
    
    public static int helper(Node head){
        if(head==null) return 1;
        int carry=helper(head.next);
        head.data=head.data+carry;
        if(head.data<10){
            return 0;
        }
        head.data=0;
        return 1;
    }
}


TC=O(N)   SC=O(1)
