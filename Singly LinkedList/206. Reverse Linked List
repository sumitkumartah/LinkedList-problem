206. Reverse Linked List



BRUTE::>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null) return null;
        Stack<Integer> st=new Stack<>();
        ListNode temp=head;
        while(temp!=null){
            st.push(temp.val);
            temp=temp.next;
        }
        temp=head;
        while(temp!=null){
            temp.val=st.pop();
            temp=temp.next;
        }
        return head;
    }
}

TC=O(2N) SC=O(1)




OPTIMAL BY USING ONE LOOP >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null ||    head.next==null) return head;
        ListNode temp=head;
        ListNode prev=null;
        while(temp!=null){
            ListNode front=temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;
        }
        return prev;
    }
}

TC=O(N)  SC=O(1)




OPTIMAL BY USING RECURTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null ||    head.next==null) return head;
        ListNode temp=head;
        ListNode newnode=reverseList(head.next);

        ListNode front=temp.next;
        front.next=head;
        head.next=null;

        return newnode;
    }
}


TC=O(N)  SC=O(1)
