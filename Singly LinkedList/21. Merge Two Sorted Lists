21. Merge Two Sorted Lists


BRUTE ::

 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        List<Integer> arr = new ArrayList<>();
        if(list1==null && list2==null) return null;

        while (list1 != null) {
            arr.add(list1.val);
            list1 = list1.next;
        }
        while (list2 != null) {
            arr.add(list2.val);
            list2 = list2.next;
        }
        Collections.sort(arr);
        ListNode head = Arr2LL(arr);
        return head;
    }

    public ListNode Arr2LL(List<Integer> arr) {
        
        ListNode head = new ListNode(arr.get(0));

        ListNode prev = head;
        for (int i = 1; i < arr.size(); i++) {
            ListNode temp = new ListNode(arr.get(i));
            prev.next = temp;
            prev = temp;
        }
        return head;
    }
}








optimal>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null && list2==null) return null;

       ListNode dummynode= new ListNode (-1);
       ListNode cur=dummynode;
       while(list1!=null && list2!=null)
       {
           
           if(list1.val <= list2.val)
           {
               cur.next=list1;
               cur=list1;
               list1=list1.next;
           }
           else{
               cur.next=list2;
               cur=list2;
               list2=list2.next;
           }
         
       }
       if(list1!=null)
       {
           cur.next=list1;
           list1=list1.next;
       }else{
           cur.next=list2;
           list2=list2.next;
       }

       return dummynode.next;
    }
}


TC=O(N1 + N2)
Sc= O(1)



TC= 0(N1) + O(N2) + O(N LOG N) + O(N)

SC=O(N) + O(N)
