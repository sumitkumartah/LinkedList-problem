234. Palindrome Linked List




BRUTE FORCE BY USING STACK>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Solution {
    public boolean isPalindrome(ListNode head) {
       
        if(head==null || head.next==null) return true;
          ListNode temp=head;
        Stack<Integer> st=new Stack<>();
        while(temp!=null){
            st.add(temp.val);
            temp=temp.next;
        }

        temp=head;
        while(temp!=null){
            if(temp.val!=st.pop()) return false;
            temp=temp.next;
        }    
        return true;
    }
}


TC =O(2N)     SC=O(N)









OPTIMAL BY USING TORTOISE AND HARE METHOD>>>>>>>>>>>>>>>>>>


class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }

        ListNode newhead= reverse(slow.next);  //SET THE NEWHEAD AT THE LAST NODE
        
        ListNode first=head;
        ListNode second=newhead;

        while(second!=null){
            if(first.val!=second.val){
                reverse(head);  //BEFORE RETURNING JUST FIX THE ll
                return false;
            }
            first=first.next;
            second=second.next;
        }
        reverse(newhead);  //BEFORE RETURNING JUST FIX THE ll
        return true;
    }

    public static ListNode reverse(ListNode node){
      if(node==null || node.next==null) return node;
      ListNode newhead=reverse(node.next);
      ListNode front=node.next;
      front.next=node;
      node.next=null;

      return newhead;
    }
}
TC=O(2N)   SC=O(1)
